// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Branches {
  id                  Int                 @id @default(autoincrement())
  name                String              @db.VarChar(255)
  address             String              @db.VarChar(255)
  phone               String              @db.VarChar(255)
  state               Boolean             @default(true)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  rooms               Rooms[]
  subjects            Subjects[]
  students            Students[]
  teachers            Teachers[]
  staffs              Staffs[]
  inscriptions        Inscriptions[]
}

model Users {
  id                  Int                 @id @default(autoincrement())
  dni                 String              @unique
  name                String              @db.VarChar(255)
  lastName            String              @db.VarChar(255)
  email               String              @unique
  emailValidated      Boolean             @default(false)
  image               String?             @db.VarChar(255)
  phone               String              @db.VarChar(255)
  password            String              @db.VarChar(255)
  sessionToken        String?             @db.VarChar(255)
  expiresToken        DateTime?           @db.Time()
  codeValidation      String?             @unique
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  staff               Staffs?
  student             Students?
  teacher             Teachers?
}

model Staffs {
  id                  Int                 @id @default(autoincrement())
  userId              Int                 @unique
  roleId              Int                 @db.Integer
  state               Boolean             @default(true)
  superStaff          Boolean             @default(false)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  user                Users               @relation(fields: [userId], references: [id])
  role                Roles               @relation(fields: [roleId], references: [id])
  inscriptions        Inscriptions[]
  branches            Branches[]
}

model Permissions {
  id                  Int                 @id @default(autoincrement())
  name                String              @db.VarChar(255)
  module              String              @db.VarChar(255)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  roles               Roles[]
}

model Roles {
  id                  Int                 @id @default(autoincrement())
  name                String              @db.VarChar(255)
  state               Boolean             @default(true)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  permissions         Permissions[]
  staff               Staffs[]
}

model Students {
  id                  Int                 @id @default(autoincrement())
  userId              Int                 @unique
  code                String              @unique
  state               Boolean             @default(true)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  user                Users               @relation(fields: [userId], references: [id])
  inscriptions        Inscriptions[]
  branches            Branches[]
  classes             Classes[]
  tutors              Tutors[]
  monthlyFeeds        MonthlyFee[]
  invoice             Invoice[] 
}

model Tutors {
  id                  Int                 @id @default(autoincrement())
  userId              Int                 @unique
  state               Boolean             @default(true)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  students            Students[]
}

model Teachers {
  id                  Int                 @id @default(autoincrement())
  userId              Int                 @unique
  state               Boolean             @default(true)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  user                Users               @relation(fields: [userId], references: [id])
  classes             Classes[]
  branches            Branches[]
}

model Inscriptions {
  id                  Int                 @id @default(autoincrement())
  studentId           Int                 @db.Integer
  staffId             Int                 @db.Integer
  subjectId           Int                 @db.Integer
  branchId            Int                 @db.Integer
  priceId             Int                 @db.Integer
  total               Int                 @db.Integer
  url                 String?             @db.VarChar(255)
  state               Boolean             @default(true)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  student             Students            @relation(fields: [studentId], references: [id])
  staff               Staffs              @relation(fields: [staffId], references: [id])
  subject             Subjects            @relation(fields: [subjectId], references: [id])
  branch              Branches            @relation(fields: [branchId], references: [id])
  price               Price               @relation(fields: [priceId], references: [id])
  
  monthlyFee          MonthlyFee[] 
}

model Subjects {
  id                  Int                 @id @default(autoincrement())
  categoryId          Int                 @db.Integer
  name                String              @db.VarChar(255)
  code                String              @db.VarChar(255)
  state               Boolean             @default(true)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  category            Categories          @relation(fields:[categoryId],references: [id])
  moduless            Modules[]
  inscriptions        Inscriptions[]
  branches            Branches[]
}

model Categories {
  id                  Int                 @id @default(autoincrement())
  name                String              @db.VarChar(255)
  state               Boolean             @default(true)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  subjects            Subjects[]
}

model Modules {
  id                  Int                 @id @default(autoincrement())
  subjectId           Int                 @db.Integer
  name                String              @db.VarChar(255)
  state               Boolean             @default(true)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  subject             Subjects            @relation(fields: [subjectId], references: [id])
  classes             Classes[]
}

model Rooms {
  id                  Int                 @id @default(autoincrement())
  branchId            Int                 @db.Integer
  name                String              @db.VarChar(255)
  state               Boolean             @default(true)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  branch              Branches            @relation(fields: [branchId],references: [id])
  classes             Classes[]
}

model Classes {
  id                  Int                 @id @default(autoincrement())
  roomId              Int                 @db.Integer
  teacherId           Int                 @db.Integer
  moduleId            Int                 @db.Integer
  name                String              @db.VarChar(255)
  start               DateTime            @db.Date
  end                 DateTime            @db.Date
  state               Boolean             @default(true)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  room                Rooms               @relation(fields: [roomId],references: [id])
  teacher             Teachers            @relation(fields: [teacherId],references: [id])
  module              Modules             @relation(fields: [moduleId],references: [id])
  students            Students[]
  price               Price[]

}

model Price{
  id                  Int                 @id @default(autoincrement())
  classesId           Int                 @db.Integer
  inscription         Float             @default(0.00)
  month               Float             @default(0.00)
  state               Boolean             @default(true)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  classes             Classes             @relation(fields: [classesId],references: [id])

  inscriptions        Inscriptions[]
}

model MonthlyFee {
  id           Int      @id @default(autoincrement())
  startDate    DateTime @db.Date
  endDate      DateTime @db.Date
  totalInscription Float @default(0.00)
  totalAmount  Float @default(0.00)
  studentId    Int
  amountPaid   Float  @default(0.00)
  inscriptionId Int
  amountPending Float @default(0.00)
  state        Boolean  @default(true)
  student      Students  @relation(fields: [studentId], references: [id])
  inscriptions Inscriptions @relation(fields: [inscriptionId], references: [id])

  payments     MonthlyFeePayment[]
  invoices     Invoice[]
}

model MonthlyFeePayment {
  id              Int      @id @default(autoincrement())
  paymentDate     DateTime
  amount          Float @default(0.00)
  commitmentDate  DateTime?   @default(now())
  transactionNumber String?
  isInscription Boolean @default(false)
  payMethod         PayMethod @default(CASH)
  monthlyFeeId    Int
  monthlyFee      MonthlyFee @relation(fields: [monthlyFeeId], references: [id])
}


model Invoice {
  id                 Int      @id @default(autoincrement())
  invoiceNumber      String
  authorizationNumber String
  controlCode        String
  issueDate          DateTime
  dueDate            DateTime?
  totalAmount        Decimal
  issuerNIT          String
  buyerNIT           String
  buyerName          String
  studentId          Int
  student            Students  @relation(fields: [studentId], references: [id])
  monthlyFeeId       Int?
  monthlyFee         MonthlyFee? @relation(fields: [monthlyFeeId], references: [id])
}


// ENUMUS SECTIONS

enum PayMethod {
  CASH
  BANK
  QR
}